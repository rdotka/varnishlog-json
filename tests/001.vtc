varnishtest "basic req sanity checks"

feature cmd jq

varnish v1 -vcl {
	import std;

	backend be none;
	sub vcl_recv {
		unset req.http.baz;
		set req.http.bar = "qux";
		set req.http.x = "1";
		std.log("in recv");
		return (synth(200));
	}

	sub vcl_synth {
		std.log("in synth");
		set resp.http.y = "ignored";
		unset resp.http.y;
		set resp.http.z = "will be overridden";
		set resp.http.z = "will be overridden too";
		set resp.http.z = "final";
	}
} -start

client c1 {
	txreq -url "/foo" -hdr "bar: baz" -hdr "bar: qux" -hdr "bar: quxx"
	rxresp
} -run

# give some time for the logs to land (0.1s is overly generous)
delay 0.1

shell {
	t() {
		if [ "$(${varnishlog-json_bin} -c -n ${v1_name} -d | jq -r $1)" = "$2" ]; then
			echo "ok: $1 == $2"
		else
			echo "fail: $1 ($(${varnishlog-json_bin} -c -n ${v1_name} -d | jq -r $1)) != $2"
			exit 1
		fi
	}

${varnishlog-json_bin} -c -n ${v1_name} -dp
	t .req.url /foo
	t .req.method GET
	t .req.proto HTTP/1.1
	t .req.headers.bar[0] baz
	t .req.headers.bar[1] qux
	t .req.headers.bar[2] quxx
	t .req.headers.x[0] "null"
	t .req.headers.host[0] 127.0.0.1

	t .resp.status 200
	t .resp.reason OK
	t .resp.proto HTTP/1.1
	t .resp.headers.y[0] "null"
	t .resp.headers.z[0] "final"

	t .side client
	t .id 1001
	t .vcl vcl1
	t .client.rAddr 127.0.0.1
	t .client.sock a0

	t .logs[0] "in recv"
	t .logs[1] "in synth"
}
